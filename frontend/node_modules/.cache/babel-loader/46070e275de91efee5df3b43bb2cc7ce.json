{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\m\\\\m\\\\frontend\\\\src\\\\screens\\\\ResetPasswordScreen.js\",\n    _s = $RefreshSig$();\n\nimport Axios from 'axios';\nimport { Link, useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { Row, Col } from 'react-bootstrap';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { Helmet } from 'react-helmet-async';\nimport { React, useContext, useEffect, useState } from 'react';\nimport { Store } from '../Store';\nimport { toast } from 'react-toastify';\nimport { getError } from '../utils'; //import { match } from 'react-router-dom';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ResetPasswordScreen() {\n  _s();\n\n  const navigate = useNavigate();\n  const {\n    search\n  } = useLocation();\n  const redirectInUrl = new URLSearchParams(search).get('redirect');\n  const redirect = redirectInUrl ? redirectInUrl : '/';\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const {\n    state,\n    dispatch: ctxDispatch\n  } = useContext(Store);\n  const {\n    userInfo\n  } = state;\n\n  const submitHandler = async e => {\n    e.preventDefault(); //const params = useParams();\n\n    const token = useParams.params.token;\n\n    try {\n      if (password !== confirmPassword) {\n        toast.error(getError('Les motes de passe ne sont pas indentiques'));\n      } else {\n        const {\n          data\n        } = await Axios.patch(`/api/users/resetpassword/${token}`, {\n          password\n        });\n        ctxDispatch({\n          type: 'USER_SIGNIN',\n          payload: data\n        });\n        localStorage.setItem('userInfo', JSON.stringify(data));\n        navigate(redirect || '/');\n      }\n    } catch (err) {\n      toast.error(getError(err));\n    }\n  };\n\n  useEffect(() => {\n    if (userInfo) {\n      navigate(redirect);\n    }\n  }, [navigate, redirect, userInfo]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"small-container\",\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"r\\xE9initialiser le mot de passe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"my-3\",\n      children: \"r\\xE9initialiser le mot de passe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"email\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Nouveau mot de passe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"password\",\n          required: true,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"password\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Comfirmer votre nouveau mot de passe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          required: true,\n          onChange: e => setConfirmPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Enregistrer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"py-3 d-block\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          className: \"my-2\",\n          children: [' ', /*#__PURE__*/_jsxDEV(Link, {\n            to: `/signin?redirect=${redirect}`,\n            children: \"Se connecter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ResetPasswordScreen, \"OzzQjJ6hc3gzQ4ct+pAWMKWGC7o=\", false, function () {\n  return [useNavigate, useLocation];\n});\n\n_c = ResetPasswordScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPasswordScreen\");","map":{"version":3,"sources":["C:/Users/user/Desktop/m/m/frontend/src/screens/ResetPasswordScreen.js"],"names":["Axios","Link","useLocation","useNavigate","useParams","Row","Col","Container","Form","Button","Helmet","React","useContext","useEffect","useState","Store","toast","getError","ResetPasswordScreen","navigate","search","redirectInUrl","URLSearchParams","get","redirect","password","setPassword","confirmPassword","setConfirmPassword","state","dispatch","ctxDispatch","userInfo","submitHandler","e","preventDefault","token","params","error","data","patch","type","payload","localStorage","setItem","JSON","stringify","err","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,WAAf,EAA4BC,WAA5B,EAAyCC,SAAzC,QAA0D,kBAA1D;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,KAAT,EAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,QAAT,QAAyB,UAAzB,C,CACA;;;AAGA,eAAe,SAASC,mBAAT,GAA+B;AAAA;;AAC5C,QAAMC,QAAQ,GAAGhB,WAAW,EAA5B;AACA,QAAM;AAAEiB,IAAAA;AAAF,MAAalB,WAAW,EAA9B;AACA,QAAMmB,aAAa,GAAG,IAAIC,eAAJ,CAAoBF,MAApB,EAA4BG,GAA5B,CAAgC,UAAhC,CAAtB;AACA,QAAMC,QAAQ,GAAGH,aAAa,GAAGA,aAAH,GAAmB,GAAjD;AAEA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,eAAD,EAAkBC,kBAAlB,IAAwCd,QAAQ,CAAC,EAAD,CAAtD;AAEA,QAAM;AAAEe,IAAAA,KAAF;AAASC,IAAAA,QAAQ,EAAEC;AAAnB,MAAmCnB,UAAU,CAACG,KAAD,CAAnD;AACA,QAAM;AAAEiB,IAAAA;AAAF,MAAeH,KAArB;;AACA,QAAMI,aAAa,GAAG,MAAOC,CAAP,IAAa;AACjCA,IAAAA,CAAC,CAACC,cAAF,GADiC,CAEhC;;AACA,UAAMC,KAAK,GAAGhC,SAAS,CAACiC,MAAV,CAAiBD,KAA/B;;AACD,QAAI;AACF,UAAIX,QAAQ,KAAKE,eAAjB,EAAkC;AAChCX,QAAAA,KAAK,CAACsB,KAAN,CAAYrB,QAAQ,CAAC,4CAAD,CAApB;AACD,OAFD,MAGK;AAEL,cAAM;AAAEsB,UAAAA;AAAF,YAAW,MAAMvC,KAAK,CAACwC,KAAN,CAAa,4BAA2BJ,KAAM,EAA9C,EAAgD;AAAEX,UAAAA;AAAF,SAAhD,CAAvB;AAEAM,QAAAA,WAAW,CAAC;AAAEU,UAAAA,IAAI,EAAE,aAAR;AAAuBC,UAAAA,OAAO,EAAEH;AAAhC,SAAD,CAAX;AACAI,QAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAjC;AACApB,QAAAA,QAAQ,CAACK,QAAQ,IAAI,GAAb,CAAR;AACD;AAAC,KAXF,CAWG,OAAOuB,GAAP,EAAY;AACb/B,MAAAA,KAAK,CAACsB,KAAN,CAAYrB,QAAQ,CAAC8B,GAAD,CAApB;AACD;AACF,GAlBD;;AAoBAlC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImB,QAAJ,EAAc;AACZb,MAAAA,QAAQ,CAACK,QAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAACL,QAAD,EAAWK,QAAX,EAAqBQ,QAArB,CAJM,CAAT;AAMA,sBACE,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,iBAArB;AAAA,4BACE,QAAC,MAAD;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEC,aAAhB;AAAA,8BACE,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,SAAS,EAAC,MAAtB;AAA6B,QAAA,SAAS,EAAC,OAAvC;AAAA,gCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,QAAQ,MAFV;AAGE,UAAA,QAAQ,EAAGC,CAAD,IAAOR,WAAW,CAACQ,CAAC,CAACc,MAAF,CAASC,KAAV;AAH9B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eASE,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,SAAS,EAAC,MAAtB;AAA6B,QAAA,SAAS,EAAC,UAAvC;AAAA,gCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,QAAQ,MAFV;AAGE,UAAA,QAAQ,EAAGf,CAAD,IAAON,kBAAkB,CAACM,CAAC,CAACc,MAAF,CAASC,KAAV;AAHrC;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,eAiBE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAjBF,eAoBE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,+BACA,QAAC,GAAD;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,qBACG,GADH,eAEE,QAAC,IAAD;AAAM,YAAA,EAAE,EAAG,oBAAmBzB,QAAS,EAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cApBF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqCD;;GA1EuBN,mB;UACLf,W,EACED,W;;;KAFGgB,mB","sourcesContent":["import Axios from 'axios';\nimport { Link, useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { Row, Col } from 'react-bootstrap';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { Helmet } from 'react-helmet-async';\nimport { React, useContext, useEffect, useState } from 'react';\nimport { Store } from '../Store';\nimport { toast } from 'react-toastify';\nimport { getError } from '../utils';\n//import { match } from 'react-router-dom';\n\n\nexport default function ResetPasswordScreen() {\n  const navigate = useNavigate();\n  const { search } = useLocation();\n  const redirectInUrl = new URLSearchParams(search).get('redirect');\n  const redirect = redirectInUrl ? redirectInUrl : '/';\n\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { userInfo } = state;\n  const submitHandler = async (e) => {\n    e.preventDefault();\n     //const params = useParams();\n     const token = useParams.params.token\n    try {\n      if (password !== confirmPassword) {\n        toast.error(getError('Les motes de passe ne sont pas indentiques'))\n      }\n      else {\n\n      const { data } = await Axios.patch(`/api/users/resetpassword/${token}`,{ password });\n\n      ctxDispatch({ type: 'USER_SIGNIN', payload: data });\n      localStorage.setItem('userInfo', JSON.stringify(data));\n      navigate(redirect || '/');\n    }} catch (err) {\n      toast.error(getError(err));\n    }\n  };\n\n  useEffect(() => {\n    if (userInfo) {\n      navigate(redirect);\n    }\n  }, [navigate, redirect, userInfo]);\n\n  return (\n    <Container className=\"small-container\">\n      <Helmet>\n        <title>réinitialiser le mot de passe</title>\n      </Helmet>\n      <h1 className=\"my-3\">réinitialiser le mot de passe</h1>\n      <Form onSubmit={submitHandler}>\n        <Form.Group className=\"mb-3\" controlId=\"email\">\n          <Form.Label>Nouveau mot de passe</Form.Label>\n          <Form.Control\n            type=\"password\"\n            required\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"password\">\n          <Form.Label>Comfirmer votre nouveau mot de passe</Form.Label>\n          <Form.Control\n            type=\"text\"\n            required\n            onChange={(e) => setConfirmPassword(e.target.value)}\n          />\n        </Form.Group>\n        <div className=\"mb-3\">\n          <Button type=\"submit\">Enregistrer</Button>\n        </div>     \n        <Row className=\"py-3 d-block\">\n        <Col className=\"my-2\">\n          {' '}\n          <Link to={`/signin?redirect=${redirect}`}>\n            Se connecter\n          </Link>\n        </Col>\n      </Row>\n      </Form>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}